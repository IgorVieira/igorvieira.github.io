<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Igor Vieira</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 01 May 2017 22:48:47 -0300</pubDate>
    <lastBuildDate>Mon, 01 May 2017 22:48:47 -0300</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>Vamos falar de Vuejs </title>
        <description>&lt;p&gt;Bem, eu pensei em falar sobre Vuejs, pensei em escrever algo sobre em inglês, mas antes de traduzir esse texto, quero que as pessoas do meu próprio pais entendam Vue, Vuejs é uma bibliteca para views como o próprio nome diz de fato, tanto que pronuncia é bem semelhante ~ Vu ~, mas do que se trata Vue, em meu ponto de vista, ele é uma junção muito bem feita de React com algumas coisas pertinentes ao Angular, o que de fato facilita o aprendizado do framework, mas não te prende a sua estrutura, sabendo Javascript, você consegue fazer muita coisas em torno da biblioteca.&lt;/p&gt;

&lt;p&gt;Vamos ao objetivo deste post, o que pretendo nos próximos dias é criar uma aplicação simples, a base é um to-do-list, porém coisas mais interessante a respeito dele, um to-do-list onde você terá anotações para o mesmo to-do-list, mas o diferencial dessa série, é test, vamos guiar nosso desenvolvimento por meio de test, pra isso vamos usar o vue-cli, não sou muito fã de cli, mas acho que esse apresenta uma boa abordagem para teste, ainda mais para testes e2e, gostei muito dos esquemas para orgnização de testes, eis a lista do workflow que iremos precisar para montar a nossa aplicação&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;vue-cli&lt;/li&gt;
  &lt;li&gt;firebase&lt;/li&gt;
  &lt;li&gt;vue-resource&lt;/li&gt;
  &lt;li&gt;vue-router&lt;/li&gt;
  &lt;li&gt;vuefire&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Primeiro vamos instalar o vue-cli:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    sudo npm install vue-cli -g
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Depois que instalamos ele globalmente, vamos utilizar a versão dele com webpack, você pode escolher browserify, não recomendo, poucos usam, e o meu post eu devo seguir mesmo com webpack, de toda forma vamos inicializar aplicação assim:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    vue init webpack to-do-list
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Pronto, ele vai criar começar a inicializar a nossa aplicação, o que queremos é a seguinte stack para o nosso front:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
? Project name to-do-list
? Project description A Vue.js project
? Author Igor Vieira &amp;lt;igor.p.r.vieira@gmail.com&amp;gt;
? Vue build standalone
? Install vue-router? No
? Use ESLint to lint your code? No
? Setup unit tests with Karma + Mocha? Yes
? Setup e2e tests with Nightwatch? Yes


vue-cli · Generated &quot;to-do-list&quot;.

   To get started:
   
     cd to-do-list
     npm install
     npm run dev
   


&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;E vamos começar a partir disso, entramos ai no to-do-list, damos um npm install e vamos ver mesmo como está a nossa aplicação com npm run dev, e sejamos felizes.&lt;/p&gt;

&lt;p&gt;Aqui eu vou usar o VSCode, ele já tem uns plugins para vue-js, é só um shift+ctrl+x, digita vue-js e procure o: Syntax Highlight for Vue.js, instale e é isso.&lt;/p&gt;

&lt;p&gt;Vamos entrar na pasta e alterar algumas coisas, primeiro, vamos entrar no folder e em src
&lt;code class=&quot;highlighter-rouge&quot;&gt;./src&lt;/code&gt;, esse vai ser por hora o único folder que iremos trabalhar , existe outro folder dentro chamado componentes, vamos deletar esse arquivo, Hello.vue,pronto,  repare que Vuejs tem um template próprio, então tudo o que vamos criar tem uma certa extensão .vue, vamos deletar esse arquivo e criar um outro folder, home/Home.vue e ficará assim&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;├── App.vue
├── components
│   └── home
│       └── Home.vue
└── main.js    

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Pronto, é assim que queremos os nossos arquivos, indo em App.vue, vamos fazer algumas pequenas alterações, mas eu vou preferir apagar tudo e criar passo a passo, então apague tudo em App.vue e deixe da seguinte forma:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;template&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;

    export default{

        data(){
             
             return{

             }

        }

    }

&amp;lt;/script&amp;gt;


&amp;lt;style&amp;gt;
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Essa é a estrutura básica de qualquer componente que viemos a criar com Vue, template é onde teremos a nossa view e alguns atributos como binds por exemplo no qual os dados vem da view ao nosso data e do data pode ser passado a nossa view, data nesse caso se emplica a uma função onde podemos trabalhar a nossa aplicação, criar objetos, passar objetos e poder chamá-los em outras partes da nossa aplicação, podemos trabalhar inúmeras possiblidades, é bem interessante, e por fim temos o nosso style, que implica na estilização da nossa aplicação.&lt;/p&gt;

&lt;p&gt;Para inicio, temos que organizar essa estrura melhor, vamos somente chamar Home e tornar ele como um componente única da nossa View,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;template&amp;gt;
&amp;lt;/template&amp;gt;


&amp;lt;script&amp;gt;
import Home from './components/home/Home'

export default {
  name: 'app',
  components: {
    Home
  }
}
&amp;lt;/script&amp;gt;

&amp;lt;style&amp;gt;

&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Depois vamos criar o nosso template, repare que colocamos uma nova tag &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;home&amp;gt;&amp;lt;/home&amp;gt;&lt;/code&gt; e ela está dentro de uma div, ela é importante pelo seguinte, tudo o que fizermos temos que passar em nosso template em um único bloco, sempre dentro de uma div, caso contrário ele não entenderá o nosso componente ou os diversos componentes que precisarmos.&lt;/p&gt;

&lt;p&gt;PS:Eu adicionei já o estilo para a aplicação, no fim style é aparte onde trataremos o CSS da nossa aplicação, não que CSS não seja importante, mas pra frente traremos mais coisas somente a respeito dele!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;template&amp;gt;
  &amp;lt;div id=&quot;app&quot;&amp;gt;
    &amp;lt;home&amp;gt;&amp;lt;/home&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
import Home from './components/home/Home'

export default {
  name: 'app',
  components: {
    Home
  }
}
&amp;lt;/script&amp;gt;

&amp;lt;style&amp;gt;
@import url('https://fonts.googleapis.com/css?family=Indie+Flower');
#app {
  font-family: 'Indie Flower', cursive;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  color: #2c3e50;
  margin-top: 60px;
}
&amp;lt;/style&amp;gt;


&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Saindo de App.vue, vamos trabalhar com o nosso primeiro componente, Home, em &lt;code class=&quot;highlighter-rouge&quot;&gt;./src/components/home/Home.vue&lt;/code&gt;, vamos fazer a mesma coisa, trabalhare ele do zero.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;template&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;

    export default{

        data(){
             
             return{

             }

        }

    }

&amp;lt;/script&amp;gt;


&amp;lt;style&amp;gt;
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Primeiro vamos ver se tudo funciona bem!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;template&amp;gt;

    &amp;lt;h1&amp;gt;Hey&amp;lt;h1&amp;gt;

&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;

    export default{

        data(){
             
             return{

             }

        }

    }

&amp;lt;/script&amp;gt;


&amp;lt;style&amp;gt;
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Ai você me pergunta:
 “Igor mas dentro de template não teria que ter uma div? “
Não necessiariamente, se eu tiver apenas uma tag dentro de template, eu posso passar somente essa tag, mesmo se for um componente, não tem problema, agora se eu tiver mais de um componente, eu precisarei colocar tudo dentro de uma div de fato, mas vamos testar somente como está.&lt;/p&gt;

&lt;p&gt;Bem, podemos notar que funcionou, agora precisamos implementar a nossa pequena lista de fazeres, e ver o que de fato foi feito!&lt;/p&gt;

&lt;p&gt;Para isso vamos trabalhar em nosso script, Vue é tão intuitivo que você pode entender ele da seguinte forma, nosso data, retorna algo para algum lugar, e esse lugar é a nossa view, que no caso é nosso template, então o que fizermos em nosso data, podemos passar para nossa view ou até mesmo útilizar em nosso script dentro de um metódo, vamos começar pelo seguinte, vamos mostrar o titulo ~ Hey ~ pelo nosso data, e assim faremos:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;template&amp;gt;

    &amp;lt;h1&amp;gt;&amp;lt;h1&amp;gt;

&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;

    export default{

        data(){
             
             return{
                title:'Hey',
                
             }

        }

    }

&amp;lt;/script&amp;gt;


&amp;lt;style&amp;gt;
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note, eu criei um atributo que recebe uma string com o nome title, e  já definida com seguinte texto: ‘Hey’, agora vamos criar mais, quero criar uma lista com as minhas atividades, ou seja, isso será um array, as unicas informações que quero passar são as seguintes, o texto descrevendo a minha atividade e um outro atributo dizendo se foi feita ou não, que é um boolean, enfim, tomei a liberdade e o nosso data ficará assim:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;template&amp;gt;

    &amp;lt;h1&amp;gt;&amp;lt;h1&amp;gt;

&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;

    export default{

        data(){
             
             return{
                title:'Hey',
                tasks:[
                    {
                        name:'Read about Elixir',
                        done:true
                    },
                    {
                        name:'Write more about VueJS',
                        done:true
                    },
                    {
                        name:'Make a coffee',
                        done:true
                    }

                ]
             }

        }

    }

&amp;lt;/script&amp;gt;


&amp;lt;style&amp;gt;
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Pois bem, temos o nossa lista de tarefas definidas em nosso data, e precisamos passar isso em nosso template, como fazer isso? vamos usar de uma diretiva chamada v-for, para quem vem de Angular, lembra muito o ng-for, é bem semelhante mesmo e a implementação ficara dessa forma:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;template&amp;gt;

    &amp;lt;h1&amp;gt;&amp;lt;h1&amp;gt;
     &amp;lt;ul &amp;gt;
        &amp;lt;li v-for=&quot;task in tasks&quot;&amp;gt;
            &amp;lt;span&amp;gt; -  | &amp;lt;/span&amp;gt;
        &amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;

    export default{

       // código anterior

    }

&amp;lt;/script&amp;gt;


&amp;lt;style&amp;gt;
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Entretanto isso não funcionará, como remediar isso, colocamos as nossas duas tags h1 e ul li dentro de uma única div, agora sim funcionará perfeitamente. =]&lt;/p&gt;

&lt;p&gt;Próximo passo será a implementação é criar um input, para podermos adicionar novas tarefas, vamos criar um form onde teremos apenas um input do tipo text e outro do tipo checkbox e mais um button, e é isso:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;template&amp;gt;

    &amp;lt;h1&amp;gt;&amp;lt;h1&amp;gt;
     &amp;lt;ul &amp;gt;
        &amp;lt;li v-for=&quot;task in tasks&quot;&amp;gt;
            &amp;lt;span&amp;gt; -  | &amp;lt;/span&amp;gt;
        &amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
     &amp;lt;form&amp;gt;
        &amp;lt;input type=&quot;text&quot;&amp;gt;
        &amp;lt;input type=&quot;checkbox&quot;&amp;gt;
        &amp;lt;button class=&quot;btn&quot; name=&quot;add&quot;&amp;gt;Add + &amp;lt;/button&amp;gt;
     &amp;lt;/form&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;

    export default{

        data(){
             
             return{
                title:'Hey',
                tasks:[
                    {
                        name:'Read about Elixir',
                        done:true
                    },
                    {
                        name:'Write more about VueJS',
                        done:true
                    },
                    {
                        name:'Make a coffee',
                        done:true
                    }

                ]
             }

        }

    }

&amp;lt;/script&amp;gt;


&amp;lt;style&amp;gt;
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;O VueJS tem um evento chamdo de &lt;code class=&quot;highlighter-rouge&quot;&gt;@submit&lt;/code&gt;, no qual vamos inserir no nosso form, assim qualquer ação efetuada dentro dele atraves de um submit, será efetuada pela função que foi passada por dentro dele, e ai vamos criar a nossa função, dentro de nosso export default, além de data, podemos criar outros métodos, da seguinte forma:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;template&amp;gt;
    // código anterior

    &amp;lt;form @submit=&quot;submitTask()&quot;&amp;gt;
        &amp;lt;input type=&quot;text&quot;&amp;gt;
        &amp;lt;input type=&quot;checkbox&quot;&amp;gt;
        &amp;lt;button class=&quot;btn&quot; name=&quot;add&quot;&amp;gt;Add + &amp;lt;/button&amp;gt;
     &amp;lt;/form&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;

    export default{

        data(){
             
             return{
                title:'Hey',
                tasks:[
                    {
                        name:'Read about Elixir',
                        done:true
                    },
                    {
                        name:'Write more about VueJS',
                        done:true
                    },
                    {
                        name:'Make a coffee',
                        done:true
                    }

                ]
             }

        },

        methods:{

            submitTask(){
                console.log('I'm here!')
            }

        }

    }

&amp;lt;/script&amp;gt;


&amp;lt;style&amp;gt;
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Só que tem um problema, quando clicamos no button do nosso form, ele gera um reload na página, e não queremos isso, então para podermos solucionar isso, só precisamos adicionar sunto ao evento, um prevent, igual ao &lt;code class=&quot;highlighter-rouge&quot;&gt;e.preventDefault()&lt;/code&gt;, mas da seguinte forma &lt;code class=&quot;highlighter-rouge&quot;&gt;@submit.prevent=&quot;submitTask()&quot;&lt;/code&gt;, assim nós garantimos que quando for adicionado uma nova informação, a mesma não irá gerar um load na página, bem, passado isso vamos implementar de fato o input, para isso precisaremos criar um novo atributo em data, uma task que será um objeto, no qual quando formos passar para o nossa lista, só precisaremos dar um push junto a lista e ela será adicionada junto ao array de objetos, então vamos com calma, primeiro o objeto em nosso data:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;template&amp;gt;
    // código anterior

&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;

    export default{

        data(){
             
             return{
                title:'Hey',
                tasks:[
                    {
                        name:'Read about Elixir',
                        done:true
                    },
                    {
                        name:'Write more about VueJS',
                        done:true
                    },
                    {
                        name:'Make a coffee',
                        done:true
                    }

                ],
                task:{
                    name:'',
                    done:false
                }
                
             }

        },

        methods:{
             // código anterior
        }

    }

&amp;lt;/script&amp;gt;


&amp;lt;style&amp;gt;
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Pronto, criamos o nosso objeto, task recebe nome e como done, false, pois o nosso atributo checkbox quando marcado receberá true e no seu estado atual do elemento ele já tem por si só o valor como false, agora vamos para a nossa função:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  methods:{

            submitTask(){
                this.tasks.push(this.task)
                this.task = {
                    name:'',
                    done:false
                }
            }

        }

    }

&amp;lt;/script&amp;gt;


&amp;lt;style&amp;gt;
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;O que dizemos aqui foi o seguinte, recebemos um objeto que será preenchido pela nossa view e passamos atráves do nosso push um novo objeto, é legal notar que conseguimos acessar tasks atráves do &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; e assim podemos ir adicionando mais uma posição em nosso array, mas como vamos pegar essas informações? como vamos adicionar ao nosso array? Vamos fazer o seguinte, o próprio Vuejs tem uma diretiva chamada v-model que consegue trazer os elementos renderizados da view para o data e do data para view, e dessa forma conseguiremos atribuir o valor que foi passado da nossa view para o nosso data e adicioná-lo em nosso array de tarefas, em nossa lista de tarefas, dessa forma:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;

&amp;lt;template&amp;gt;
 
        &amp;lt;div&amp;gt;
            &amp;lt;h1&amp;gt;&amp;lt;/h1&amp;gt;
            &amp;lt;ul &amp;gt;
                &amp;lt;li v-for=&quot;task in tasks&quot;&amp;gt;
                    &amp;lt;span&amp;gt; -  | &amp;lt;/span&amp;gt;
                &amp;lt;/li&amp;gt;
            &amp;lt;/ul&amp;gt;
            &amp;lt;form @submit.prevent=&quot;submitTask()&quot;&amp;gt;
                &amp;lt;input type=&quot;text&quot; v-model=&quot;task.name&quot;&amp;gt;
                &amp;lt;input type=&quot;checkbox&quot; v-model=&quot;task.done&quot;&amp;gt;
                &amp;lt;button class=&quot;btn&quot; name=&quot;add&quot;&amp;gt;Add + &amp;lt;/button&amp;gt;
            &amp;lt;/form&amp;gt;

        &amp;lt;/div&amp;gt;

&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Observe que nos inputs tem um v-model, em que cada um deles eu tenho o meu objeto task com seus atributos, tudo é uma questão de chave e valor, eu recebo o valor em cada um dos inputs, eles são passados para o meu objeto, meu objeto é inserido atraves do método push ao meu array tasks, que é um array de objetos, e assim meu array ganha uma nova posição, simples e fácil, agora para encerrar o post de hoje, vamos implementar como deletar uma tarefa!&lt;/p&gt;

&lt;p&gt;Esse é bem simples, como vemos uma posição de um array? Atráves do indexOf() do mesmo array, então no fim só precisamos saber a posição, e retirar o objeto presente naquele array com splice, vejamos como é isso, primeriamente, vamos modifcar nosso template:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;lt;ul &amp;gt;
    &amp;lt;li v-for=&quot;task in tasks&quot;&amp;gt;
        &amp;lt;span&amp;gt; -  | &amp;lt;/span&amp;gt;
        &amp;lt;i @click=&quot;removeTask(task)&quot; class=&quot;fa fa-trash&quot;&amp;gt;&amp;lt;/i&amp;gt;
    &amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Veja que agora na nossa lista eu adicionei um icon, esse icon é do font awesome, já já vamos poder usá-lo, mas antes vamos focar no que importa, temos um evento de &lt;code class=&quot;highlighter-rouge&quot;&gt;@click&lt;/code&gt; que recebe uma função na qual a mesma tem um parametro  chamdo task, o que faremos agora é o seguinte, vamos ao nossos methods:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  methods:{

            submitTask(){
                this.tasks.push(this.task)
                this.task = {
                    name:'',
                    done:false
                }
            },


             removeTask(taskItem){
                const taskRemove = this.tasks.indexOf(taskItem)
                this.tasks.splice(taskRemove,1 )
            }

        }

    }

&amp;lt;/script&amp;gt;


&amp;lt;style&amp;gt;
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A função removeTask(taskItem), receberá um item da nossa lista, o que queremos é a posição dele, então pegamos o nosso item, vemos a posição referente ao array, depois pegamos nosso mesmo array e retiramos o objeto presente na posição ao qual indicamos antes, e usamos o splice pare retirar o objeto referente aquela posição, e é isso, no fim nosso Home ficará assim:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;template&amp;gt;
 
        &amp;lt;div&amp;gt;
            &amp;lt;h1&amp;gt;&amp;lt;/h1&amp;gt;
            &amp;lt;ul &amp;gt;
                &amp;lt;li v-for=&quot;task in tasks&quot;&amp;gt;
                    &amp;lt;span&amp;gt; -  | &amp;lt;/span&amp;gt;
                    &amp;lt;i @click=&quot;removeTask(task)&quot; class=&quot;fa fa-trash&quot;&amp;gt;&amp;lt;/i&amp;gt;
                &amp;lt;/li&amp;gt;
            &amp;lt;/ul&amp;gt;
            &amp;lt;form @submit.prevent=&quot;submitTask()&quot;&amp;gt;
                &amp;lt;input type=&quot;text&quot; v-model=&quot;task.name&quot;&amp;gt;
                &amp;lt;input type=&quot;checkbox&quot; v-model=&quot;task.done&quot;&amp;gt;
                &amp;lt;button class=&quot;btn&quot; name=&quot;add&quot;&amp;gt;Add + &amp;lt;/button&amp;gt;
            &amp;lt;/form&amp;gt;

        &amp;lt;/div&amp;gt;

&amp;lt;/template&amp;gt;
&amp;lt;script&amp;gt;



export default {

    data(){
        return{
            title:'Hey!',
            tasks:[
                {
                    name:'Read about Elixir',
                    done:true
                },
                {
                    name:'Write more about VueJS',
                    done:true
                },
                {
                    name:'Make a coffee',
                    done:true
                }

            ],
            task: {
                name:'',
                done:false
            }

        }
    },
    methods:{

        submitTask(){
           this.tasks.push(this.task)
           this.task = {
                name:'',
                done:false
            }
        },

        removeTask(taskItem){
           const taskRemove = this.tasks.indexOf(taskItem)
           this.tasks.splice(taskRemove,1 )
        }




    }

}

&amp;lt;/script&amp;gt;
&amp;lt;style&amp;gt;
  
 
&amp;lt;/style&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Só vamos aproveitar que temos uma class em button do nosso form e vamos deixar ele assim, ficará mais bonito:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;template&amp;gt;
 
        &amp;lt;div&amp;gt;
            &amp;lt;h1&amp;gt;&amp;lt;/h1&amp;gt;
            &amp;lt;ul &amp;gt;
                &amp;lt;li v-for=&quot;task in tasks&quot;&amp;gt;
                    &amp;lt;span&amp;gt; -  | &amp;lt;/span&amp;gt;
                    &amp;lt;i @click=&quot;removeTask(task)&quot; class=&quot;fa fa-trash&quot;&amp;gt;&amp;lt;/i&amp;gt;
                &amp;lt;/li&amp;gt;
            &amp;lt;/ul&amp;gt;
            &amp;lt;form @submit.prevent=&quot;submitTask()&quot;&amp;gt;
                &amp;lt;input type=&quot;text&quot; v-model=&quot;task.name&quot;&amp;gt;
                &amp;lt;input type=&quot;checkbox&quot; v-model=&quot;task.done&quot;&amp;gt;
                &amp;lt;button class=&quot;btn&quot; name=&quot;add&quot;&amp;gt;Add + &amp;lt;/button&amp;gt;
            &amp;lt;/form&amp;gt;

        &amp;lt;/div&amp;gt;

&amp;lt;/template&amp;gt;
&amp;lt;script&amp;gt;



export default {

    data(){
        return{
            title:'Hey!',
            tasks:[
                {
                    name:'Read about Elixir',
                    done:true
                },
                {
                    name:'Write more about VueJS',
                    done:true
                },
                {
                    name:'Make a coffee',
                    done:true
                }

            ],
            task: {
                name:'',
                done:false
            }

        }
    },
    methods:{

        submitTask(){
           this.tasks.push(this.task)
           this.task = {
                name:'',
                done:false
            }
        },

        removeTask(taskItem){
           const taskRemove = this.tasks.indexOf(taskItem)
           this.tasks.splice(taskRemove,1 )
        }




    }

}

&amp;lt;/script&amp;gt;
&amp;lt;style&amp;gt;
  
  .btn{
    color:#ccc;
    background:#1554DB;
    border-radius:6px;
    width: 4rem;
    height: 2em;
    padding:1.3em, 1.3rem, 1.3em;
    cursor:pointer;
  }

&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Pronto, first step concluído, próximo passo, vamos fazer um pequeno test com a nossa aplicação, um teste e2e e um teste unitário, mas isso será um próximo post, por enquanto é só, obrigado e até mais =]&lt;/p&gt;

</description>
        <pubDate>Mon, 01 May 2017 00:00:00 -0300</pubDate>
        <link>http://localhost:4000/vamos-falar-de-vuejs</link>
        <guid isPermaLink="true">http://localhost:4000/vamos-falar-de-vuejs</guid>
        
        
        <category>Javascript,</category>
        
        <category>Vuejs,</category>
        
        <category>Firebase</category>
        
      </item>
    
      <item>
        <title>Talk about arrow functions again! </title>
        <description>&lt;p&gt;Why will you talk about arrow function? Everybody knows about this, everbody knows in this way is more simple to write a function, but somepeople don’t know how powerfull write and use arrow functions, we go to first example&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// we have a normaly function


function iDOSomething (name) {
 Return console.log (&quot;My name is:&quot; + name);
}



console.log (iDoSomething ('Igor'))

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now we go to rewrite this same function&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
IDoSomething = (name) =&amp;gt; `My name is $ {name}`;
Console.log (iDoSomething ('Igor'))


&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If your note, arrow functions is a sintaxe sugar, whats this? Is more easy to write a function less verbose and more simple for you or other people understand what I you do, for exemplo a good way to read a code
is a code in your read is easy, just like baby steps, go back to code, step by step&lt;/p&gt;

&lt;p&gt;iDoSomething - The name about my function&lt;/p&gt;

&lt;p&gt;= (Name) =&amp;gt; - I expect the name in my function&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;My name is $ {name}&lt;/code&gt; - The return about my function&lt;/p&gt;

&lt;p&gt;Just like a flux data, simple to read and simple to write, good code need to be just like this.&lt;/p&gt;

&lt;p&gt;But you need to pay attention, look over this way to write, you see another detail, I write a function and do not pass to return, note, I wrote in one line, but if you have a block in the arrow function, you need to pass this return, the otherwise you receive the undefine because you pass and this function receive the params but not return the same value in this function try to return something and this something is undefine.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iDoSomething = (name) =&amp;gt; {
`My name is $ {name}`
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;console.log (iDoSomething ('Igor'))

// undefine

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In real is possible write the diferents way:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const iDoSomething =(name)=&amp;gt; { ...}
iDoSomething =(name)=&amp;gt; {...}

const calc = {
    mult:(x,y) =&amp;gt; x * y,
    ...
 }

console.log(`Possible multiply: ${calc.mult(5,10)}`)



&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In the end this arrow function, is the syntax sugar, is the way more easy to read and write, perfect to use with promises and the little way to distinct, organize and standardize your code for the other programers, and is possible to write just like a describe function, is possible to build a stack for resolve functions, especially if you have a stack of asynchronous functions,but the big power about this way to write is organization and the simplicity of writing code, probably you work in team and other people read you do, so… in the end you do not write for you, you Write for the others, so write a good code just like baby steps, thank you for your time and see you soon!&lt;/p&gt;
</description>
        <pubDate>Tue, 28 Mar 2017 00:00:00 -0300</pubDate>
        <link>http://localhost:4000/talk-about-arrow-function-again</link>
        <guid isPermaLink="true">http://localhost:4000/talk-about-arrow-function-again</guid>
        
        
        <category>Javascript</category>
        
      </item>
    
      <item>
        <title>A new Step - Variables! </title>
        <description>&lt;p&gt;Today I proposed my self study JS, again, but I proposed to use the new features just like let, const, arrow function, template string, class, map, filter and other awesome functions and it’s not new, I use, but some people dont and is not a problem, but I have a problem in seeing simple applications, like baby steps for you to see in “real life” and more, why you need to use these new features, for example, var is different from let and cont&lt;/p&gt;

&lt;p&gt;var is a global variable
let specified a scope
And const normally use for a situation is no have a change of you have
but is possible use you have for other stuff’s&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/IgorVieira/igorvieira.github.io/blob/master/_images/variables.jpg?raw=true&quot; alt=&quot;Variable&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So let in go for a example&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var name = &quot;Igor&quot;


const saySomething = (name) =&amp;gt; {
  
  let hey = 'Hey'
  
  return `${hey} ${name}`;

}

console.log(saySomething(name))



&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is a function and I call this function “saySomething” this function have one paramter and for const is a perfect use, no have changes because this function receive one paramter and return one value, one value in and one value out, but inside in this function has a let variable
and this variable receive a string, this string return on template string in your value and the value pass in paramter but
is a one value, one in one out, for now I call this function inside a console.log and print “Hey Igor”
this is beautifull!&lt;/p&gt;

&lt;p&gt;But I prove some points is possible call a pass and call again one variable var, and const is appropriate where i create a function in which it has the same return, however if a call a let variable?&lt;/p&gt;

&lt;p&gt;This variable return a error, because this variable belongs to a one scope, saySomething()&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//code
...

console.log(hey)

//Error: &quot;ReferenceError: hey is not defined&quot;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So Let belongs to a scope, var is now global and const is for a specific variable where i receive a value and i no have possibilities to change this value but is possible work in this value, var is terrible variable if you stop for think, is possible manipulated in all part in script and change your value, horever let your have warranty about value inside in your variable is possible work inside a function and return in a const function for exemplo.&lt;/p&gt;

&lt;p&gt;I see greats changes for work now:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Is possible use imutable variables if your need use this values in all script with const;&lt;/li&gt;
  &lt;li&gt;Is possible work let variables with low riks for change and return this inside a function or another scope if, try e etc&lt;/li&gt;
  &lt;li&gt;Now var depends a lot, since var is now synonymous with something volatile, for example, const declared as an array, receives values, is still an array even if its values ​​inside the array change, it still continues an array so i can replace var by const and ensure that it remains an array&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//Just Const


const foo = []

let bar = &quot;Hey&quot;


foo.push(bar)
console.log(foo)
//[&quot;Hey&quot;]



foo.push(bar)
console.log(foo)
//[&quot;Hey&quot;,&quot;Hey&quot;]



foo.splice(1,1)
console.log(foo)
//[&quot;Hey&quot;]

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//Const if I try change your type

const foo = []
console.log(typeof foo)

foo = &quot;&quot;

console.log(typeof foo)

//&quot;TypeError: Assignment to constant variable.&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//Var be a var :p

var foo = []
console.log(typeof foo)
//object


foo = &quot;&quot;
console.log(typeof foo)
// string
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For now I belive is a good first baby step and in this week I promise  write another post about new features, next step we will talk more about arrow functions!&lt;/p&gt;

&lt;p&gt;Thanks and see you soon!&lt;/p&gt;
</description>
        <pubDate>Thu, 23 Mar 2017 00:00:00 -0300</pubDate>
        <link>http://localhost:4000/a-new-step</link>
        <guid isPermaLink="true">http://localhost:4000/a-new-step</guid>
        
        
        <category>Javascript</category>
        
      </item>
    
      <item>
        <title>Hey and Welcome! =] </title>
        <description>&lt;p&gt;Today, I ‘m completing three months in Belo Horizonte is a long history, but I simplificading for you, I was living in Goiânia a Capital of state Goiás, in Brazil, is a nice city but a little poor in oportunities for new tecnologies, is not impossible but is hard find a job  people work with Nodejs, JS, Ruby or React, Ember, Angular and other languages and frameworks, i love Goiânia, but is true,
sorry guys ¯_(ツ)_/¯&lt;/p&gt;

&lt;p&gt;I moved on from Goiânia , and I living BH, its a form I call Belo Horizonte, is more simple rsrs so here, in BH I work in Lett insights a little big startup rsrs, i love the place, I like the people, is very cool,
and I love this city, BH, is more spensive but is great place and I have good neighbors and i  maked good friends, the street on i live, exist a lot good restaurants, japanese food, hamburguers and pizza’s I miss a place just like a coffee shop but its ok!
Today I ‘m pass my day studing and building a setup for a new project for my cousin, I will build a site in PHP for the offices lawyers, its very nice code a site again, my plans for this next days is build this site, study for Mongodb University, study more, go out with my new friends and talk more with you guys!&lt;/p&gt;

&lt;p&gt;I will try, is no promise, but I  will try post one blogpost for day
so…
See you soon! =]&lt;/p&gt;
</description>
        <pubDate>Sat, 18 Mar 2017 00:00:00 -0300</pubDate>
        <link>http://localhost:4000/hey-and-welcome</link>
        <guid isPermaLink="true">http://localhost:4000/hey-and-welcome</guid>
        
        
        <category>Lifestyle</category>
        
      </item>
    
  </channel>
</rss>
